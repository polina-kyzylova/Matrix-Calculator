<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>ОПЕРАЦИИ:

Программа "Калькулятор матриц" устроена 
таким образом, что все вычисления с 
матрицами производятся только после 
очередного указания их размеров.
Чтобы совершить какие-либо операции с 
матрицей, сначала отчистите поле от старой 
матрицы с помощью кнопки "Отчистить 
матрицу". Только после этого вы получите 
возможность ввести новые размеры матрицы 
или заполнить ее самостоятельно.

1. Определитель матрицы

Согласно математическим законам 
определитель можно найти только для 
КВАДРАТНОЙ (содержащей одинаковое 
количество строк и стобцов) матрицы.

Операция включает в себя три метода 
вычисления определителя матрицы:
- Метод Гаусса применим для квадратоной 
матрицы любого порядка. Чтобы вычислить 
определитель этом способом, введите значения 
для генерации матрицы/ 
заполните матрицу самостоятельно, затем 
нажмите на клавишу "Вычислить 
определитель" и в окне справа появится ответ.
- Метод Крамера используется в случае, если 
количество строк и стобцов больше либо равно 
трём.
Чтобы получить ответ, заполните матрицу в 
области слева и нажмите на  клавишу 
"Вычислить определитель". В соответсвующем 
окне справа появится ответ.
- Метод Треугольников применим только для 
квадратной матрицы ТРЕТЬЕГО ПОРЯДКА. Во 
всех остальных случаях ответ не корректен.

2. Транспонирование матрицы

Транспонирование матрицы - это замена строк 
матрицы на ее столбцы. Для транспонирования 
матрицы заполните поле для матрицы справа в 
ручную, либо с помощью случайной генерации. 
Затем нажмите клавишу "Транспонировать 
матрицу".

3. Операции с матрицами

Согласно математическим законам, складывать 
и вычитать можно только матрицы 
ОДИНАКОВОГО РАЗМЕРА. Чтобы выполнить 
операцию, заполните удобным Вам способом 
матрицы А и B, затем нажмите нужную 
клавишу между ними и в поле справа появится 
результат вычислений.
Умножать можно матрицы любых размеров. 

4. Умножение матрицы на число

Умножить матрицу на число значит умножить 
каждый ее член на это число. Чтобы 
выполнить вычисления, заполните матрицу в 
поле справа и укажите число, на которое 
необходимо умножить  матрицу. Затем 
нажмите клавишу "Умножить матрицу" и в поле 
справа появится результат вычислений.
 
5. Возведение матрицы в степень

Возведение матрицы в степень - это процесс 
умножения матрицы саму на себя такое 
количество раз, какое задается числом степени.

6. Дополнительно
Ввод значений переменных N и M, задающих 
размер двухмерного массива. Также 
осуществляется ввод параметра С, 
определющего номер столбца, в котором 
будет производиться поиск элементов с 
нечётными номерами.
Ответом будет считаться максимальный 
элемент из найденных.</value>
  </data>
</root>